// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: auth.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const findWithID = `-- name: FindWithID :one
SELECT id, created_at, updated_at, name, email, password FROM users WHERE id = $1
`

func (q *Queries) FindWithID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, findWithID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const logIn = `-- name: LogIn :one
SELECT id, created_at, updated_at, name, email, password FROM users WHERE email = $1
`

func (q *Queries) LogIn(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, logIn, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const signUp = `-- name: SignUp :one
INSERT INTO users(id, created_at, updated_at, name, email, password) 
values ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, name, email, password
`

type SignUpParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Email     string
	Password  string
}

func (q *Queries) SignUp(ctx context.Context, arg SignUpParams) (User, error) {
	row := q.db.QueryRowContext(ctx, signUp,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}
